# Task ID: 26
# Title: User Email Preference Management
# Status: pending
# Dependencies: 19, 23
# Priority: high
# Description: Implement global opt-in/opt-out preference management for users and ensure compliance with email regulations for Philippines audience.
# Details:
1. Design user email preference UI
2. Implement preference storage in the database
3. Create API endpoints for preference management
4. Add unsubscribe link processing from emails
5. Implement preference center for users
6. Add compliance features for email regulations
7. Create preference history tracking
8. Implement preference synchronization with Postmark

```typescript
// Example email preferences schema
/*
CREATE TABLE user_email_preferences (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  email VARCHAR(255) NOT NULL,
  marketing_opt_in BOOLEAN DEFAULT TRUE,
  educational_opt_in BOOLEAN DEFAULT TRUE,
  transactional_opt_in BOOLEAN DEFAULT TRUE,
  is_valid_email BOOLEAN DEFAULT TRUE,
  bounce_reason TEXT,
  opt_out_reason TEXT,
  last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id)
);

-- Preference history table for audit
CREATE TABLE user_email_preference_history (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  email VARCHAR(255) NOT NULL,
  preference_type VARCHAR(50) NOT NULL,
  old_value BOOLEAN,
  new_value BOOLEAN,
  changed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  changed_by UUID REFERENCES auth.users(id),
  source VARCHAR(50) -- 'user', 'admin', 'system', 'unsubscribe_link'
);
*/

// Example preference management component
import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabaseClient';

const EmailPreferences = ({ userId }) => {
  const [preferences, setPreferences] = useState({
    marketing_opt_in: true,
    educational_opt_in: true,
    transactional_opt_in: true
  });
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [message, setMessage] = useState('');
  
  useEffect(() => {
    // Load user preferences
    const fetchPreferences = async () => {
      setLoading(true);
      
      const { data, error } = await supabase
        .from('user_email_preferences')
        .select('*')
        .eq('user_id', userId)
        .single();
        
      if (error && error.code !== 'PGRST116') { // PGRST116 is "not found"
        console.error('Error loading preferences:', error);
        setMessage('Failed to load preferences');
      } else if (data) {
        setPreferences({
          marketing_opt_in: data.marketing_opt_in,
          educational_opt_in: data.educational_opt_in,
          transactional_opt_in: data.transactional_opt_in
        });
      }
      
      setLoading(false);
    };
    
    fetchPreferences();
  }, [userId]);
  
  const handleToggle = (preference) => {
    setPreferences(prev => ({
      ...prev,
      [preference]: !prev[preference]
    }));
  };
  
  const savePreferences = async () => {
    setSaving(true);
    setMessage('');
    
    try {
      // Get user's email
      const { data: userData, error: userError } = await supabase.auth.getUser();
      
      if (userError) throw userError;
      
      const email = userData.user.email;
      
      // Update preferences
      const { error } = await supabase
        .from('user_email_preferences')
        .upsert({
          user_id: userId,
          email,
          marketing_opt_in: preferences.marketing_opt_in,
          educational_opt_in: preferences.educational_opt_in,
          transactional_opt_in: preferences.transactional_opt_in,
          updated_at: new Date()
        }, {
          onConflict: 'user_id'
        });
        
      if (error) throw error;
      
      // Record history for each changed preference
      // This would typically be handled by a database trigger
      
      setMessage('Preferences saved successfully');
    } catch (error) {
      console.error('Error saving preferences:', error);
      setMessage('Failed to save preferences');
    } finally {
      setSaving(false);
    }
  };
  
  if (loading) {
    return <div>Loading preferences...</div>;
  }
  
  return (
    <div className="email-preferences">
      <h2>Email Preferences</h2>
      
      {message && (
        <div className={message.includes('Failed') ? 'error-message' : 'success-message'}>
          {message}
        </div>
      )}
      
      <div className="preference-option">
        <label>
          <input
            type="checkbox"
            checked={preferences.marketing_opt_in}
            onChange={() => handleToggle('marketing_opt_in')}
          />
          Marketing Emails (Sales, promotions, and special offers)
        </label>
      </div>
      
      <div className="preference-option">
        <label>
          <input
            type="checkbox"
            checked={preferences.educational_opt_in}
            onChange={() => handleToggle('educational_opt_in')}
          />
          Educational Content (Class reminders, instructional content)
        </label>
      </div>
      
      <div className="preference-option">
        <label>
          <input
            type="checkbox"
            checked={preferences.transactional_opt_in}
            onChange={() => handleToggle('transactional_opt_in')}
            disabled={true} // Transactional emails can't be opted out of
          />
          Transactional Emails (Account updates, purchase confirmations)
        </label>
        <small>These emails are required for your account and cannot be disabled.</small>
      </div>
      
      <div className="preference-actions">
        <button
          onClick={savePreferences}
          disabled={saving}
        >
          {saving ? 'Saving...' : 'Save Preferences'}
        </button>
      </div>
      
      <div className="preference-info">
        <p>
          We respect your privacy and are committed to protecting your personal data.
          For more information, please see our <a href="/privacy-policy">Privacy Policy</a>.
        </p>
      </div>
    </div>
  );
};

export default EmailPreferences;
```

# Test Strategy:
1. Test preference saving and loading functionality
2. Verify unsubscribe link processing
3. Test preference center UI across different devices
4. Validate compliance with email regulations
5. Test preference history tracking
6. Verify preference synchronization with Postmark
7. Test preference changes impact on email sending
8. Validate security of preference management endpoints
