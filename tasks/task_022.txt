# Task ID: 22
# Title: Campaign Management System
# Status: cancelled
# Dependencies: 20, 32
# Priority: medium
# Description: Develop a campaign management interface with scheduling capabilities, recipient targeting, and automation for recurring emails.
# Details:
1. Design campaign management UI with listing, filtering, and status views
2. Implement campaign creation workflow
3. Create recipient selection interface using segments and tags
4. Build scheduling functionality with timezone support
5. Implement campaign preview and testing
6. Create campaign duplication functionality
7. Develop automation rules for recurring emails
8. Add A/B testing capabilities
9. Implement campaign status tracking

```typescript
// Example campaign creation component
import React, { useState } from 'react';
import { supabase } from '../lib/supabaseClient';
import { SegmentSelector } from '../components/SegmentSelector';
import { TemplateSelector } from '../components/TemplateSelector';
import { DateTimePicker } from '../components/DateTimePicker';

const CampaignCreator = () => {
  const [campaign, setCampaign] = useState({
    name: '',
    subject: '',
    from_name: 'Graceful Homeschooling',
    from_email: 'hello@gracefulhomeschooling.com',
    template_id: null,
    segment_id: null,
    scheduled_for: null,
    is_recurring: false,
    recurrence_pattern: null
  });
  
  const [step, setStep] = useState(1); // Multi-step form
  
  const handleChange = (field, value) => {
    setCampaign(prev => ({ ...prev, [field]: value }));
  };
  
  const handleSegmentChange = (segmentId) => {
    handleChange('segment_id', segmentId);
  };
  
  const handleTemplateChange = (templateId) => {
    handleChange('template_id', templateId);
  };
  
  const handleScheduleChange = (date) => {
    handleChange('scheduled_for', date);
  };
  
  const toggleRecurring = () => {
    handleChange('is_recurring', !campaign.is_recurring);
  };
  
  const saveCampaign = async () => {
    try {
      const { data, error } = await supabase
        .from('email_campaigns')
        .insert([
          {
            name: campaign.name,
            subject: campaign.subject,
            from_name: campaign.from_name,
            from_email: campaign.from_email,
            template_id: campaign.template_id,
            segment_id: campaign.segment_id,
            scheduled_for: campaign.scheduled_for,
            is_recurring: campaign.is_recurring,
            recurrence_pattern: campaign.recurrence_pattern,
            status: 'draft',
            created_at: new Date()
          }
        ]);
        
      if (error) throw error;
      
      // Handle success - redirect to campaign detail or list
    } catch (error) {
      console.error('Error creating campaign:', error);
    }
  };
  
  const renderStepContent = () => {
    switch (step) {
      case 1:
        return (
          <div className="campaign-details">
            <h3>Campaign Details</h3>
            <div className="form-group">
              <label>Campaign Name</label>
              <input
                type="text"
                value={campaign.name}
                onChange={(e) => handleChange('name', e.target.value)}
              />
            </div>
            <div className="form-group">
              <label>Subject Line</label>
              <input
                type="text"
                value={campaign.subject}
                onChange={(e) => handleChange('subject', e.target.value)}
              />
            </div>
            {/* Additional fields */}
          </div>
        );
      case 2:
        return (
          <div className="campaign-content">
            <h3>Email Content</h3>
            <TemplateSelector
              selectedTemplateId={campaign.template_id}
              onSelect={handleTemplateChange}
            />
          </div>
        );
      case 3:
        return (
          <div className="campaign-audience">
            <h3>Select Audience</h3>
            <SegmentSelector
              selectedSegmentId={campaign.segment_id}
              onSelect={handleSegmentChange}
            />
          </div>
        );
      case 4:
        return (
          <div className="campaign-schedule">
            <h3>Schedule Campaign</h3>
            <div className="form-group">
              <label>Send Date and Time</label>
              <DateTimePicker
                value={campaign.scheduled_for}
                onChange={handleScheduleChange}
              />
            </div>
            <div className="form-group">
              <label>
                <input
                  type="checkbox"
                  checked={campaign.is_recurring}
                  onChange={toggleRecurring}
                />
                Make this a recurring campaign
              </label>
            </div>
            {campaign.is_recurring && (
              <div className="recurrence-options">
                {/* Recurrence pattern options */}
              </div>
            )}
          </div>
        );
      default:
        return null;
    }
  };
  
  return (
    <div className="campaign-creator">
      <h2>Create New Campaign</h2>
      
      <div className="step-indicator">
        {/* Step indicators */}
      </div>
      
      {renderStepContent()}
      
      <div className="form-actions">
        {step > 1 && (
          <button onClick={() => setStep(step - 1)}>Previous</button>
        )}
        
        {step < 4 ? (
          <button onClick={() => setStep(step + 1)}>Next</button>
        ) : (
          <button onClick={saveCampaign}>Create Campaign</button>
        )}
      </div>
    </div>
  );
};

export default CampaignCreator;
```

# Test Strategy:
1. Test campaign creation workflow with various configurations
2. Verify scheduling functionality with different timezones
3. Test recipient targeting with different segments
4. Validate campaign preview functionality
5. Test campaign duplication
6. Verify recurring campaign setup and execution
7. Test A/B testing configuration
8. Validate campaign status updates throughout lifecycle
