/**
 * Test Xendit Webhook Handler for Payouts v2
 * 
 * This tests the webhook endpoint that processes Xendit payout status updates
 */

import { config } from 'dotenv';
config({ path: '.env.local' });

// Mock webhook payloads based on Xendit v2 Payouts API documentation
const sampleWebhookPayloads = {
  payoutCompleted: {
    event: 'payout.succeeded',
    data: {
      id: 'payout_test_12345',
      amount: 1000,
      channel_code: 'PH_GCASH',
      currency: 'PHP',
      description: 'Test affiliate payout',
      reference_id: 'gh_payout_test_123_1749793395476',
      status: 'SUCCEEDED',
      created: '2025-01-16T12:00:00Z',
      updated: '2025-01-16T12:05:00Z',
      business_id: 'business_123',
      channel_properties: {
        account_number: '09171234567',
        account_holder_name: 'Juan Dela Cruz'
      },
      receipt_notification: {
        email_to: ['affiliate@test.com']
      },
      metadata: {
        affiliate_id: 'affiliate_456',
        internal_payout_id: 'test_123',
        system: 'gh-website-affiliate'
      }
    }
  },
  
  payoutFailed: {
    event: 'payout.failed',
    data: {
      id: 'payout_test_67890',
      amount: 500,
      channel_code: 'PH_BDO',
      currency: 'PHP',
      description: 'Test affiliate payout',
      reference_id: 'gh_payout_test_456_1749793395477',
      status: 'FAILED',
      created: '2025-01-16T12:00:00Z',
      updated: '2025-01-16T12:10:00Z',
      business_id: 'business_123',
      channel_properties: {
        account_number: '1234567890',
        account_holder_name: 'Maria Santos'
      },
      failure_code: 'INVALID_ACCOUNT_NUMBER',
      metadata: {
        affiliate_id: 'affiliate_789',
        internal_payout_id: 'test_456',
        system: 'gh-website-affiliate'
      }
    }
  },
  
  payoutPending: {
    event: 'payout.pending',
    data: {
      id: 'payout_test_11111',
      amount: 750,
      channel_code: 'PH_PAYMAYA',
      currency: 'PHP',
      description: 'Test affiliate payout',
      reference_id: 'gh_payout_test_789_1749793395478',
      status: 'PENDING',
      created: '2025-01-16T12:00:00Z',
      updated: '2025-01-16T12:02:00Z',
      business_id: 'business_123',
      channel_properties: {
        account_number: '09281234567',
        account_holder_name: 'Pedro Cruz'
      },
      estimated_arrival_time: '2025-01-16T18:00:00Z',
      metadata: {
        affiliate_id: 'affiliate_111',
        internal_payout_id: 'test_789',
        system: 'gh-website-affiliate'
      }
    }
  }
};

async function testWebhookEndpoint(payload, description) {
  console.log(`\nüìû Testing: ${description}`);
  console.log('='.repeat(50));
  
  try {
    const webhookUrl = 'http://localhost:3000/api/webhooks/xendit/disbursement';
    
    // Simulate webhook signature (in real scenario, this would be generated by Xendit)
    const mockSignature = 'mock_signature_for_testing';
    
    const response = await fetch(webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-callback-token': process.env.XENDIT_WEBHOOK_SECRET || 'test_webhook_secret',
        'webhook-signature': mockSignature,
      },
      body: JSON.stringify(payload),
    });
    
    console.log(`Response Status: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      const responseData = await response.text();
      console.log('‚úÖ Webhook processed successfully');
      if (responseData) {
        console.log(`Response: ${responseData}`);
      }
    } else {
      const errorData = await response.text();
      console.log('‚ùå Webhook processing failed');
      console.log(`Error: ${errorData}`);
    }
    
    return response.ok;
    
  } catch (error) {
    console.error('‚ùå Error testing webhook:', error.message);
    
    if (error.message.includes('ECONNREFUSED')) {
      console.log('üí° Next.js development server is not running');
      console.log('   Start it with: npm run dev');
    }
    
    return false;
  }
}

function analyzeWebhookPayload(payload, description) {
  console.log(`\nüîç Analyzing: ${description}`);
  console.log('='.repeat(50));
  
  console.log('üìã Payload Structure:');
  console.log(`   Event: ${payload.event}`);
  console.log(`   Payout ID: ${payload.data.id}`);
  console.log(`   Reference ID: ${payload.data.reference_id}`);
  console.log(`   Status: ${payload.data.status}`);
  console.log(`   Amount: ${payload.data.amount} ${payload.data.currency}`);
  console.log(`   Channel: ${payload.data.channel_code}`);
  
  if (payload.data.metadata) {
    console.log('üìä Metadata:');
    Object.entries(payload.data.metadata).forEach(([key, value]) => {
      console.log(`   ${key}: ${value}`);
    });
  }
  
  if (payload.data.failure_code) {
    console.log(`‚ùå Failure Code: ${payload.data.failure_code}`);
  }
  
  if (payload.data.estimated_arrival_time) {
    console.log(`‚è∞ ETA: ${payload.data.estimated_arrival_time}`);
  }
  
  // Validate required fields for our system
  const requiredFields = ['id', 'reference_id', 'status', 'amount', 'channel_code'];
  const missingFields = requiredFields.filter(field => !payload.data[field]);
  
  if (missingFields.length === 0) {
    console.log('‚úÖ All required fields present');
  } else {
    console.log(`‚ùå Missing required fields: ${missingFields.join(', ')}`);
  }
  
  // Check if we can extract affiliate info from metadata
  if (payload.data.metadata?.affiliate_id && payload.data.metadata?.internal_payout_id) {
    console.log('‚úÖ Affiliate information extractable from metadata');
  } else {
    console.log('‚ö†Ô∏è  Affiliate information not found in metadata');
  }
}

async function testWebhookHandler() {
  console.log('üß™ Xendit Webhook Handler Tests (Payouts v2)');
  console.log('='.repeat(60));
  
  // Analyze payload structures
  analyzeWebhookPayload(sampleWebhookPayloads.payoutCompleted, 'Successful Payout Webhook');
  analyzeWebhookPayload(sampleWebhookPayloads.payoutFailed, 'Failed Payout Webhook');
  analyzeWebhookPayload(sampleWebhookPayloads.payoutPending, 'Pending Payout Webhook');
  
  console.log('\nüö® NOTE: The following tests require the Next.js dev server to be running');
  console.log('Start it with: npm run dev (in another terminal)');
  console.log('\nPress Ctrl+C to skip webhook endpoint tests, or wait 5 seconds to continue...');
  
  // Wait 5 seconds before testing endpoints
  await new Promise(resolve => setTimeout(resolve, 5000));
  
  console.log('\nüì° Testing Webhook Endpoints...');
  
  // Test each webhook scenario
  const results = [];
  
  results.push(await testWebhookEndpoint(
    sampleWebhookPayloads.payoutCompleted, 
    'Successful Payout Webhook'
  ));
  
  results.push(await testWebhookEndpoint(
    sampleWebhookPayloads.payoutFailed, 
    'Failed Payout Webhook'
  ));
  
  results.push(await testWebhookEndpoint(
    sampleWebhookPayloads.payoutPending, 
    'Pending Payout Webhook'
  ));
  
  // Summary
  console.log('\nüìä Webhook Test Summary');
  console.log('='.repeat(50));
  
  const successCount = results.filter(r => r).length;
  const totalCount = results.length;
  
  console.log(`‚úÖ Payload Analysis: PASSED (3/3)`);
  console.log(`${successCount === totalCount ? '‚úÖ' : '‚ùå'} Webhook Endpoints: ${successCount}/${totalCount} PASSED`);
  
  if (successCount === 0) {
    console.log('\nüí° If webhook tests failed due to server not running:');
    console.log('   1. Run: npm run dev');
    console.log('   2. Re-run this test: node test-webhook-handler.js');
  } else if (successCount === totalCount) {
    console.log('\nüéâ All webhook tests passed! The integration is ready.');
  } else {
    console.log(`\n‚ö†Ô∏è  ${totalCount - successCount} webhook test(s) failed. Check the webhook handler implementation.`);
  }
}

// Show usage information
function showPayloadExamples() {
  console.log('\nüìù Sample Webhook Payloads for Manual Testing:');
  console.log('='.repeat(60));
  
  console.log('\n1. Successful Payout:');
  console.log(JSON.stringify(sampleWebhookPayloads.payoutCompleted, null, 2));
  
  console.log('\n2. Failed Payout:');
  console.log(JSON.stringify(sampleWebhookPayloads.payoutFailed, null, 2));
  
  console.log('\n3. Pending Payout:');
  console.log(JSON.stringify(sampleWebhookPayloads.payoutPending, null, 2));
}

// Check if user wants to see examples only
if (process.argv.includes('--examples')) {
  showPayloadExamples();
} else {
  testWebhookHandler();
} 