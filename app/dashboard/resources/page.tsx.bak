"use client"

import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useRouter } from "next/navigation"
import { ChevronLeft, Search, Filter, Download, Eye, FileText, ExternalLink, 
  ChevronRight, Folder, RotateCw, Plus, Table, FileSpreadsheet, Image } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Skeleton } from "@/components/ui/skeleton"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { motion } from "framer-motion"
import { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbSeparator } from "@/components/ui/breadcrumb"
import { GoogleDriveViewer } from "@/components/dashboard/google-drive-viewer"
import { useGoogleDriveFiles } from "@/lib/hooks/use-google-drive"
import { StudentHeader } from "@/components/dashboard/student-header"
import { useAuth } from "@/context/auth-context"
import type { DriveItem, BreadcrumbSegment } from '@/lib/google-drive/driveApiUtils'

// Extend DriveItem interface with additional properties
interface ExtendedDriveItem extends DriveItem {
  children?: number;
  webViewLink?: string;
  owners?: Array<{
    displayName: string;
    emailAddress?: string;
  }>;
}

// File type icon mapping based on MIME type
const getFileIcon = (mimeType: string | undefined, isFolder: boolean) => {
  if (isFolder) return <Folder className="h-5 w-5 text-yellow-600" />;
  if (!mimeType) return <FileText className="h-5 w-5 text-gray-500" />;

  if (mimeType.includes('pdf')) {
    return <FileText className="h-5 w-5 text-red-500" />;
  } else if (mimeType.includes('document')) {
    return <FileText className="h-5 w-5 text-blue-500" />;
  } else if (mimeType.includes('spreadsheet')) {
    return <FileSpreadsheet className="h-5 w-5 text-green-600" />;
  } else if (mimeType.includes('presentation')) {
    return <Table className="h-5 w-5 text-orange-500" />;
  } else if (mimeType.includes('image')) {
    return <Image className="h-5 w-5 text-green-500" />;
  } else {
    return <FileText className="h-5 w-5 text-gray-500" />;
  }
};

interface ResourceCardProps {
  file: DriveItem;
  onNavigate?: (folderId: string) => void;
  onPreview?: (file: DriveItem) => void;
  onDownload?: (file: DriveItem) => void;
  isSelected?: boolean;
}

const ResourceCard = ({ file, onNavigate, onPreview, onDownload, isSelected, viewMode = 'grid' }: ResourceCardProps & { viewMode?: 'grid' | 'list' }) => {
  const isFolder = file.mimeType?.includes('folder') || false;
  const Icon = getFileIcon(file.mimeType, isFolder);
  
  // Determine resource type for display
  // Cast file to extended type
  const fileExt = file as ExtendedDriveItem;
  
  const resourceType = isFolder ? 'Folder' :
    file.mimeType?.includes('pdf') ? 'PDF' :
    file.mimeType?.includes('document') ? 'Doc' :
    file.mimeType?.includes('spreadsheet') ? 'Sheet' :
    file.mimeType?.includes('presentation') ? 'Slide' :
    file.mimeType?.includes('image') ? 'Image' : 'File';

  // Get formatted date for display
  const modifiedDate = formatDate(file.modifiedTime);

  const fileSize = formatFileSize(file.size ? parseInt(file.size.toString()) : undefined);

  const handleCardClick = () => {
    if (isFolder && onNavigate) {
      onNavigate(file.id);
    } else if (!isFolder && onPreview) {
      onPreview(file);
    }
  };

  // Render different card layouts based on viewMode
  if (viewMode === 'list') {
    return (
      <Card
        className={`group overflow-hidden transition-all duration-300 hover:shadow-md active:shadow-sm
          ${isSelected ? 'border-primary ring-1 ring-primary/30 shadow-primary/10' : ''}
          ${isFolder
            ? 'cursor-pointer border-yellow-100 hover:border-yellow-300 bg-gradient-to-br from-yellow-50/80 to-amber-50/40'
            : 'cursor-pointer hover:border-primary/30 bg-gradient-to-br from-white to-gray-50/80'}`}
        onClick={handleCardClick}
      >
        <div className="p-3 flex items-center justify-between">
          <div className="flex items-center gap-3 flex-1 min-w-0">
            <div className={`p-2 rounded-md transition-all duration-300
              ${isFolder ? 'bg-yellow-100' : 'bg-primary/10'}`}>
              {Icon}
            </div>
            <div className="flex-1 truncate">
              <h3 className="font-medium text-sm truncate">{file.name || 'Untitled'}</h3>
              <div className="flex items-center gap-2 text-xs text-muted-foreground">
                <Badge variant="outline" className={`text-xs font-normal px-1.5 py-0 
                  ${isFolder ? 'bg-yellow-100 text-yellow-800 border-yellow-200' : 
                    resourceType === 'PDF' ? 'bg-red-50 text-red-700 border-red-200' :
                    resourceType === 'Doc' ? 'bg-blue-50 text-blue-700 border-blue-200' :
                    'bg-gray-100 text-gray-700 border-gray-200'}`}>
                  {resourceType}
                </Badge>
                {modifiedDate && <span>{modifiedDate}</span>}
                {!isFolder && fileSize && <span>{fileSize}</span>}
                {isFolder && fileExt.children && <span>{fileExt.children} items</span>}
              </div>
            </div>
          </div>
          
          <div className="flex gap-1">
            {!isFolder && (
              <>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 text-muted-foreground hover:text-primary transition-all duration-300"
                  onClick={(e) => { e.stopPropagation(); onPreview && onPreview(file); }}
                >
                  <Eye className="h-4 w-4" />
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 text-muted-foreground hover:text-primary transition-all duration-300"
                  onClick={(e) => { e.stopPropagation(); onDownload && onDownload(file); }}
                >
                  <Download className="h-4 w-4" />
                </Button>
              </>
            )}
            {isFolder && (
              <div className="h-8 w-8 flex items-center justify-center text-muted-foreground group-hover:text-primary transition-colors duration-300">
                <ChevronRight className="h-4 w-4 transition-transform duration-300 group-hover:translate-x-0.5" />
              </div>
            )}
          </div>
        </div>
      </Card>
    );
  }

  // Grid view (default)
  return (
    <Card
      className={`group flex flex-col h-full overflow-hidden transition-all duration-300 hover:shadow-md active:shadow-sm
        ${isSelected ? 'border-primary ring-1 ring-primary/30 shadow-primary/10' : ''}
        ${isFolder
          ? 'cursor-pointer border-yellow-100 hover:border-yellow-300 bg-gradient-to-br from-yellow-50/80 to-amber-50/40'
          : 'cursor-pointer hover:border-primary/30 bg-gradient-to-br from-white to-gray-50/80'}`}
      onClick={handleCardClick}
    >
      {/* Card Content Area */}
      <div className="p-4 flex flex-col h-full">
        {/* Resource Type Badge */}
        <div className="flex justify-between items-center mb-3">
          <Badge 
            variant="outline" 
            className={`text-xs font-normal px-2 py-0.5 
              ${isFolder ? 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200 border-yellow-200' : 
                resourceType === 'PDF' ? 'bg-red-50 text-red-700 border-red-200' :
                resourceType === 'Doc' ? 'bg-blue-50 text-blue-700 border-blue-200' :
                resourceType === 'Sheet' ? 'bg-green-50 text-green-700 border-green-200' :
                resourceType === 'Slide' ? 'bg-orange-50 text-orange-700 border-orange-200' :
                resourceType === 'Image' ? 'bg-purple-50 text-purple-700 border-purple-200' :
                'bg-gray-100 text-gray-700 border-gray-200'}`}>
            {resourceType}
          </Badge>
          
          {fileSize && !isFolder && (
            <span className="text-xs text-muted-foreground">{fileSize}</span>
          )}
        </div>
        
        {/* Icon and Title */}
        <div className="flex items-start gap-3 mb-auto">
          <div className={`p-2 rounded-md transition-all duration-300
            ${isFolder 
              ? 'bg-yellow-100 group-hover:bg-yellow-200 group-hover:scale-110' 
              : 'bg-primary/10 group-hover:bg-primary/20 group-hover:scale-110'}`}
          >
            {Icon}
          </div>
          <div className="flex-1 min-w-0">
            <h3 className="font-medium text-sm line-clamp-2 text-gray-800 group-hover:text-black transition-all duration-300">
              {file.name || 'Untitled'}
            </h3>
            {modifiedDate && (
              <div className="text-xs text-muted-foreground mt-1 flex items-center">
                <span className="inline-block w-2 h-2 rounded-full bg-muted mr-1.5"></span>
                {modifiedDate}
              </div>
            )}
          </div>
        </div>

        {/* Action Area */}
        <div className="mt-3 pt-3 border-t border-gray-100">
          {!isFolder ? (
            <div className="flex gap-2 w-full">
              <Button
                variant="ghost"
                size="sm"
                className="flex-1 text-xs h-8 bg-transparent hover:bg-primary/5 hover:text-primary transition-all duration-300"
                onClick={(e) => {
                  e.stopPropagation();
                  onPreview && onPreview(file);
                }}
              >
                <Eye className="mr-1.5 h-3.5 w-3.5" />
                Preview
              </Button>
              <Button
                variant="ghost"
                size="sm"
                className="flex-1 text-xs h-8 bg-transparent hover:bg-primary/5 hover:text-primary transition-all duration-300"
                onClick={(e) => { 
                  e.stopPropagation(); 
                  onDownload && onDownload(file); 
                }}
              >
                <Download className="mr-1.5 h-3.5 w-3.5" />
                Download
              </Button>
            </div>
          ) : (
            <div className="flex justify-between items-center">
              <span className="text-xs text-muted-foreground">
                {fileExt.children ? `${fileExt.children} items` : ''}
              </span>
              <div className="text-xs text-muted-foreground flex items-center gap-1 group-hover:text-primary transition-colors duration-300">
                <span>Open folder</span>
                <ChevronRight className="h-3.5 w-3.5 transition-transform duration-300 group-hover:translate-x-0.5" />
              </div>
            </div>
          )}
        </div>
      </div>
    </Card>
  );
};

// Format dates in a user-friendly way
const formatDate = (dateString?: string | null): string | undefined => {
  if (!dateString) return undefined;
  
  const date = new Date(dateString);
  const now = new Date();
  const yesterday = new Date(now);
  yesterday.setDate(yesterday.getDate() - 1);
  
  // Today
  if (date.toDateString() === now.toDateString()) {
    return `Today at ${date.toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit' })}`;
  }
  // Yesterday
  else if (date.toDateString() === yesterday.toDateString()) {
    return `Yesterday at ${date.toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit' })}`;
  } 
  // This year
  else if (date.getFullYear() === now.getFullYear()) {
    return date.toLocaleDateString(undefined, { month: 'short', day: 'numeric' });
  }
  // Previous years
  else {
    return date.toLocaleDateString(undefined, { month: 'short', day: 'numeric', year: 'numeric' });
  }
};

// Format file size in human-readable format
const formatFileSize = (sizeInBytes?: number): string | undefined => {
  if (!sizeInBytes) return undefined;
  
  if (sizeInBytes < 1024) return `${sizeInBytes} B`;
  if (sizeInBytes < 1024 * 1024) return `${(sizeInBytes / 1024).toFixed(1)} KB`;
  if (sizeInBytes < 1024 * 1024 * 1024) return `${(sizeInBytes / (1024 * 1024)).toFixed(1)} MB`;
  return `${(sizeInBytes / (1024 * 1024 * 1024)).toFixed(1)} GB`;
};

export default function ResourcesPage() {
  const router = useRouter()
  const { user, isLoading: isLoadingAuth } = useAuth()
  
  // View mode state - grid or list view
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid')
  
  // Keyboard navigation state and ref
  const [keyboardFocusIndex, setKeyboardFocusIndex] = useState<number>(-1)
  const resourcesRef = useRef<HTMLDivElement>(null)
  
  // Sorting state
  const [sortOption, setSortOption] = useState<string>('name_asc')
  
  // Sorting options
  type SortOption = {
    label: string;
    value: string;
    sortFn: (a: DriveItem, b: DriveItem) => number;
  }
  
  // Define sorting options
  const sortOptions: SortOption[] = [
    {
      label: 'Name (A-Z)',
      value: 'name_asc',
      sortFn: (a, b) => {
        // Always put folders first
        const aIsFolder = a.mimeType?.includes('folder') || false;
        const bIsFolder = b.mimeType?.includes('folder') || false;
        if (aIsFolder && !bIsFolder) return -1;
        if (!aIsFolder && bIsFolder) return 1;
        return (a.name || '').localeCompare(b.name || '');
      }
    },
    {
      label: 'Name (Z-A)',
      value: 'name_desc',
      sortFn: (a, b) => {
        // Always put folders first
        const aIsFolder = a.mimeType?.includes('folder') || false;
        const bIsFolder = b.mimeType?.includes('folder') || false;
        if (aIsFolder && !bIsFolder) return -1;
        if (!aIsFolder && bIsFolder) return 1;
        return (b.name || '').localeCompare(a.name || '');
      }
    },
    {
      label: 'Newest First',
      value: 'date_desc',
      sortFn: (a, b) => {
        // Always put folders first
        const aIsFolder = a.mimeType?.includes('folder') || false;
        const bIsFolder = b.mimeType?.includes('folder') || false;
        if (aIsFolder && !bIsFolder) return -1;
        if (!aIsFolder && bIsFolder) return 1;
        // Compare dates
        const aDate = a.modifiedTime ? new Date(a.modifiedTime).getTime() : 0;
        const bDate = b.modifiedTime ? new Date(b.modifiedTime).getTime() : 0;
        return bDate - aDate;
      }
    },
    {
      label: 'Oldest First',
      value: 'date_asc',
      sortFn: (a, b) => {
        // Always put folders first
        const aIsFolder = a.mimeType?.includes('folder') || false;
        const bIsFolder = b.mimeType?.includes('folder') || false;
        if (aIsFolder && !bIsFolder) return -1;
        if (!aIsFolder && bIsFolder) return 1;
        // Compare dates
        const aDate = a.modifiedTime ? new Date(a.modifiedTime).getTime() : 0;
        const bDate = b.modifiedTime ? new Date(b.modifiedTime).getTime() : 0;
        return aDate - bDate;
      }
    },
    {
      label: 'Type',
      value: 'type',
      sortFn: (a, b) => {
        // Always put folders first
        const aIsFolder = a.mimeType?.includes('folder') || false;
        const bIsFolder = b.mimeType?.includes('folder') || false;
        if (aIsFolder && !bIsFolder) return -1;
        if (!aIsFolder && bIsFolder) return 1;
        // Compare mime types
        return (a.mimeType || '').localeCompare(b.mimeType || '');
      }
    }
  ];
  
  // Background pattern styling
  const backgroundPattern = {
  
  // Apply subtle background effects for a more sophisticated look
  const backgroundPattern = {
    backgroundImage: `radial-gradient(rgba(233, 227, 216, 0.3) 1px, transparent 0)`,
    backgroundSize: '25px 25px',
    backgroundPosition: '0 0',
  }

  // Redirect to login if not authenticated
  useEffect(() => {
    if (!isLoadingAuth && !user) {
      router.push('/auth/signin')
    }
  }, [isLoadingAuth, user, router])
  
  // Add keyboard navigation
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      const items = filteredResources();
      
      // If no items or modal is open, don't do anything
      if (items.length === 0 || showPreview) return;
      
      // Handle arrow keys for navigation
      if (e.key === 'ArrowDown' || e.key === 'ArrowUp' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
        e.preventDefault(); // Prevent page scrolling
        
        let newIndex = keyboardFocusIndex;
        const gridCols = viewMode === 'grid' ? Math.min(Math.floor((window.innerWidth - 100) / 240), 5) : 1;
        
        switch (e.key) {
          case 'ArrowDown':
            // Move down in the grid or list
            newIndex = Math.min(items.length - 1, keyboardFocusIndex + gridCols);
            break;
          case 'ArrowUp':
            // Move up in the grid or list
            newIndex = Math.max(0, keyboardFocusIndex - gridCols);
            break;
          case 'ArrowRight':
            // Move right in grid or down in list
            newIndex = Math.min(items.length - 1, keyboardFocusIndex + (viewMode === 'grid' ? 1 : gridCols));
            break;
          case 'ArrowLeft':
            // Move left in grid or up in list
            newIndex = Math.max(0, keyboardFocusIndex - (viewMode === 'grid' ? 1 : gridCols));
            break;
        }
        
        if (newIndex !== keyboardFocusIndex) {
          setKeyboardFocusIndex(newIndex);
          
          // Scroll if needed
          const element = resourcesRef.current?.children[newIndex] as HTMLElement;
          if (element) {
            element.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
          }
        }
      }
      
      // Handle Enter key to open/select item
      if (e.key === 'Enter' && keyboardFocusIndex >= 0 && keyboardFocusIndex < items.length) {
        const resource = items[keyboardFocusIndex];
        if (resource.mimeType?.includes('folder')) {
          handleFolderNavigation(resource.id);
        } else {
          handleResourceSelect(resource);
        }
      }
      
      // Handle Space key to download item
      if (e.key === ' ' && keyboardFocusIndex >= 0 && keyboardFocusIndex < items.length && e.ctrlKey) {
        e.preventDefault(); // Prevent page scrolling
        const resource = items[keyboardFocusIndex];
        if (!resource.mimeType?.includes('folder')) {
          handleFileDownload(resource);
        }
      }
    };
    
    // Reset focus when filtered items change
    setKeyboardFocusIndex(-1);
    
    // Add event listener
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [filteredResources, keyboardFocusIndex, viewMode, showPreview, handleFolderNavigation, handleResourceSelect, handleFileDownload])
  
  // Use our hook for Google Drive files
  const {
    items = [],
    breadcrumbs = [],
    isLoading,
    hasError,
    currentFolderId,
    navigateToFolder,
    refreshData: refreshFiles
  } = useGoogleDriveFiles()

  // Local state
  const [searchTerm, setSearchTerm] = useState("")
  const [activeCategory, setActiveCategory] = useState("all")
  const [selectedFile, setSelectedFile] = useState<DriveItem | null>(null)
  const [showPreview, setShowPreview] = useState(false)

  // Filter items into folders and files
  const folders = items.filter(item => item.mimeType?.includes('folder'))
  const files = items.filter(item => !item.mimeType?.includes('folder'))

  // Extract categories from files (only non-folder items)
  const categories = Array.from(new Set(files
    .map(file => {
      if (file.mimeType?.includes('pdf')) return 'PDF'
      if (file.mimeType?.includes('document')) return 'Documents'
      if (file.mimeType?.includes('spreadsheet')) return 'Spreadsheets'
      if (file.mimeType?.includes('presentation')) return 'Presentations'
      return 'Other'
    })))

  // Handle search input
  const handleSearchInput = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const query = e.target.value
    setSearchTerm(query)
  }, [])

  // Handle category change
  const handleCategoryChange = useCallback((category: string) => {
    setActiveCategory(category)
  }, [])

  // Handle file selection and preview
  const handleResourceSelect = useCallback((file: DriveItem) => {
    // Only set selected file if it's not a folder
    if (!file.mimeType?.includes('folder')) {
      setSelectedFile(file)
      setShowPreview(true)
    }
  }, [])

  // Handle folder navigation
  const handleFolderNavigation = useCallback((folderId: string) => {
    // Clear any selected file when navigating
    setSelectedFile(null)
    navigateToFolder(folderId)
  }, [navigateToFolder])

  // Navigate to root folder
  const navigateToRoot = useCallback(() => {
    setSelectedFile(null) // Clear selection when navigating
    navigateToFolder(process.env.NEXT_PUBLIC_GOOGLE_DRIVE_RESOURCES_FOLDER_ID || null)
  }, [navigateToFolder])

  // Handle file download
  const handleFileDownload = useCallback((file: DriveItem) => {
    if (file.id.startsWith('mock-')) {
      console.log('Mock download triggered for:', file.name)
      return
    }

    window.open(`https://drive.google.com/uc?export=download&id=${file.id}`, "_blank")
  }, [])

  // Open file in Google Drive
  const handleOpenInDrive = useCallback((file: DriveItem) => {
    if (file.id.startsWith('mock-')) {
      console.log('Mock open in Drive triggered for:', file.name)
      return
    }

    window.open(`https://drive.google.com/file/d/${file.id}/view`, "_blank")
  }, [])
  
  // Close preview
  const handleClosePreview = useCallback(() => {
    setShowPreview(false)
  }, [])

  // Filter resources based on category and search term
  const filteredResources = useCallback(() => {
    // Always include folders unless searching
    const visibleFolders = folders.filter(folder => {
      // If searching, only include folders that match the search term
      if (searchTerm && searchTerm.trim() !== '') {
        const searchLower = searchTerm.toLowerCase()
        return folder.name?.toLowerCase().includes(searchLower) || false
      }
      // Otherwise show all folders
      return true
    })
    
    // Filter files based on category and search
    const visibleFiles = files.filter(file => {
      // Apply category filter
      if (activeCategory !== 'all') {
        const fileCategory =
          file.mimeType?.includes('pdf') ? 'PDF' :
          file.mimeType?.includes('document') ? 'Documents' :
          file.mimeType?.includes('spreadsheet') ? 'Spreadsheets' :
          file.mimeType?.includes('presentation') ? 'Presentations' :
          'Other'

        if (fileCategory !== activeCategory) return false
      }

      // Apply search filter
      if (searchTerm && searchTerm.trim() !== '') {
        const searchLower = searchTerm.toLowerCase()
        return (
          file.name?.toLowerCase().includes(searchLower) ||
          file.description?.toLowerCase().includes(searchLower)
        )
      }

      return true
    })
    
    // Combine folders and files
    const allResources = [...visibleFolders, ...visibleFiles];
    
    // Apply selected sort option if available
    const selectedSortOption = sortOptions.find(option => option.value === sortOption);
    if (selectedSortOption) {
      return allResources.sort(selectedSortOption.sortFn);
    }
    
    // Default sorting: folders first, then alphabetically by name
    return allResources.sort((a, b) => {
      if (a.mimeType?.includes('folder') && !b.mimeType?.includes('folder')) return -1;
      if (!a.mimeType?.includes('folder') && b.mimeType?.includes('folder')) return 1;
      return (a.name || '').localeCompare(b.name || '');
    });
  }, [folders, files, activeCategory, searchTerm, sortOption, sortOptions])

  // ...

  // --- Content State / Resource Grid ---
  return (
    <motion.div 
      ref={resourcesRef}
      className={viewMode === 'grid' 
        ? "grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-5 py-2" 
        : "flex flex-col gap-2 py-2"}
      variants={staggerChildren}
      initial="hidden"
      animate="visible"
    >
      {filteredResources().map((resource: DriveItem, index: number) => (
        <motion.div 
          key={resource.id} 
          variants={itemVariant}
          className={keyboardFocusIndex === index ? "ring-2 ring-primary/70 rounded-lg" : ""}
          tabIndex={0}
          aria-selected={keyboardFocusIndex === index}
          onClick={() => setKeyboardFocusIndex(index)}
        size="sm"
        className="flex items-center gap-1 bg-gray-50/50 border-gray-200 hover:bg-gray-100/80 text-xs md:w-auto w-full"
      >
        <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" className="h-3.5 w-3.5">
          <path d="M4.5 5.5L4.9 5.9L7.5 3.3V12.5H8.5V3.3L11.1 5.9L11.5 5.5L8 2L4.5 5.5Z" fill="currentColor" fillRule="evenodd" clipRule="evenodd"></path>
        </svg>
        Sort: {sortOptions.find(opt => opt.value === sortOption)?.label || 'Name'}
        <ChevronRight className="h-3.5 w-3.5 ml-1 rotate-90 opacity-70" />
      </Button>
    </DropdownMenuTrigger>
    <DropdownMenuContent align="end" className="w-40">
      {sortOptions.map(option => (
        <DropdownMenuItem
          key={option.value}
          className={`${sortOption === option.value ? 'bg-primary/5 text-primary font-medium' : ''}`}
          onClick={() => setSortOption(option.value)}
        >
          {option.label}
        </DropdownMenuItem>
      ))}
    </DropdownMenuContent>
  </DropdownMenu>
</div>
                    <p className="text-muted-foreground mb-1 text-xs">File Type</p>
                    <p className="font-medium">
                      {selectedFile.mimeType?.includes('pdf') ? 'PDF Document' :
                      selectedFile.mimeType?.includes('document') ? 'Google Document' :
                      selectedFile.mimeType?.includes('spreadsheet') ? 'Google Spreadsheet' :
                      selectedFile.mimeType?.includes('presentation') ? 'Google Presentation' :
                      selectedFile.mimeType || 'Unknown'}
                    </p>
                  </div>
                  {selectedFile.modifiedTime && (
                    <div className="bg-gray-50/70 p-3 rounded-lg">
                      <p className="text-muted-foreground mb-1 text-xs">Last Modified</p>
                      <p className="font-medium">
                        {formatDate(selectedFile.modifiedTime) || (
                          <>
                            {new Date(selectedFile.modifiedTime).toLocaleDateString()} at
                            {" "}{new Date(selectedFile.modifiedTime).toLocaleTimeString()}
                          </>
                        )}
                      </p>
                    </div>
                  )}
                  {selectedFile.createdTime && (
                    <div className="bg-gray-50/70 p-3 rounded-lg">
                      <p className="text-muted-foreground mb-1 text-xs">Created</p>
                      <p className="font-medium">
                        {formatDate(selectedFile.createdTime) || (
                          <>
                            {new Date(selectedFile.createdTime).toLocaleDateString()} at
                            {" "}{new Date(selectedFile.createdTime).toLocaleTimeString()}
                          </>
                        )}
                      </p>
                    </div>
                  )}
                  {(selectedFile as ExtendedDriveItem).owners && (selectedFile as ExtendedDriveItem).owners!.length > 0 && (
                    <div className="bg-gray-50/70 p-3 rounded-lg">
                      <p className="text-muted-foreground mb-1 text-xs">Owner</p>
                      <p className="font-medium">{(selectedFile as ExtendedDriveItem).owners![0].displayName || 'Unknown'}</p>
                    </div>
                  )}
                  {selectedFile.size && (
                    <div className="bg-gray-50/70 p-3 rounded-lg">
                      <p className="text-muted-foreground mb-1 text-xs">File Size</p>
                      <p className="font-medium">{formatFileSize(parseInt(selectedFile.size.toString()))}</p>
                    </div>
                  )}
                  {selectedFile.description && (
                    <div className="md:col-span-2 bg-gray-50/70 p-3 rounded-lg">
                      <p className="text-muted-foreground mb-1 text-xs">Description</p>
                      <p className="font-medium">{selectedFile.description}</p>
                    </div>
                  )}
                </div>
              </motion.div>
            </div>
          </motion.div>
        )}
      </main>
    </div>
  )
}
